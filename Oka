#!/usr/bin/env bash
set -euo pipefail

DATA_DIR="${HOME}/.rejoin_tool"
DATA_FILE="${DATA_DIR}/packages.json"
COOKIE_DIR="${DATA_DIR}/cookies"
DOWNLOADS_DIR="${HOME}/storage/downloads"
COOKIE_FILE="${DOWNLOADS_DIR}/cookie.txt"

mkdir -p "$DATA_DIR" "$COOKIE_DIR" "$DOWNLOADS_DIR"
[[ -f "$DATA_FILE" ]] || echo "[]" >"$DATA_FILE"

SELECTED=()
SELECTED_NAMES=()
DEFAULT_PACKAGE_NAME="banana.Tool"
ROBLOX_PKG="com.roblox.client"
AFTER_LAUNCH_SLEEP=15
OPEN_INTERVAL_DEFAULT=5

# ====== UI ======
print_banner(){
echo -e "\e[34m
 ____    _    _   _ _   _ _   _ 
| __ )  / \\  | \\ | | \\ | | \\ | |
|  _ \\ / _ \\ |  \\| |  \\| |  \\| |
| |_) / ___ \\| |\\  | |\\  | |\\  |
|____/_/   \\_\\_| \\_|_| \\_|_| \\_|
\e[0m"
echo -e "\e[33m                 banana.Tool v23\e[0m"
}

# ====== UTIL ======
has_cmd(){ command -v "$1" >/dev/null 2>&1; }
json_len(){ jq 'length' "$DATA_FILE" 2>/dev/null || echo 0; }

# SAFE LIST PACKAGE WITHOUT ROOT
safe_list_all_apps(){
    if has_cmd pm; then
        pm list packages -3 2>/dev/null | sed 's/package://g' || true
    else
        echo "$ROBLOX_PKG"
    fi
}

# ====== PACKAGE MANAGEMENT ======
add_packages_from_installed(){
    mapfile -t apps < <(safe_list_all_apps)
    (( ${#apps[@]} == 0 )) && { echo "No user apps found."; return; }

    for i in "${!apps[@]}"; do
        echo "[$i] ${apps[i]}"
    done
    read -rp "Select app numbers (comma-separated, 0 cancel): " sel
    [[ "$sel" == "0" ]] && return

    IFS=',' read -ra nums <<< "$sel"
    current=$(cat "$DATA_FILE")

    for n in "${nums[@]}"; do
        [[ ! "$n" =~ ^[0-9]+$ ]] && { echo "Invalid index: $n"; continue; }
        (( n<0 || n>=${#apps[@]} )) && { echo "Index $n out of range"; continue; }
        pkg="${apps[$n]}"
        read -rp "Label for $pkg (default: $pkg): " name
        name=${name:-$pkg}
        read -rp "PlaceId: " placeId
        read -rp "Optional JobId: " jobId
        read -rp "Package identifier (default: ${DEFAULT_PACKAGE_NAME}): " pkg_input
        pkg_input=${pkg_input:-$DEFAULT_PACKAGE_NAME}

        new=$(jq --arg n "$name" --arg p "$placeId" --arg j "$jobId" --arg pkg "$pkg_input" \
            '. + [{name:$n,placeId:$p,jobId:$j,package:$pkg}]' <<<"$current")

        echo "$new" > "$DATA_FILE"
        current="$new"
        echo "Added: $name | $pkg_input | place:$placeId | job:${jobId:-<none>}"
    done
}

list_packages(){
    len=$(json_len)
    ((len==0)) && { echo "<none>"; return; }
    for i in $(seq 0 $((len-1))); do
        n=$(jq -r ".[$i].name" "$DATA_FILE")
        p=$(jq -r ".[$i].placeId" "$DATA_FILE")
        j=$(jq -r ".[$i].jobId // \"<none>\"" "$DATA_FILE")
        pkg=$(jq -r ".[$i].package // \"<none>\"" "$DATA_FILE")
        echo "[$i] $n | place:$p | job:$j | pkg:$pkg"
    done
}

remove_package(){
    list_packages
    read -rp "Index to remove: " idx
    [[ -z "$idx" ]] && return
    [[ ! "$idx" =~ ^[0-9]+$ ]] && { echo "Invalid"; return; }
    len=$(json_len)
    (( idx<0 || idx>=len )) && { echo "Out of range"; return; }
    tmp=$(jq "del(.[$idx])" "$DATA_FILE")
    echo "$tmp" > "$DATA_FILE"
    echo "Removed index $idx"
}

select_packages(){
    len=$(json_len)
    ((len==0)) && { echo "No packages available. Add first."; return; }
    SELECTED=()
    SELECTED_NAMES=()
    echo "Available packages:"
    list_packages
    echo "Enter indices one by one. Enter 0 when done."
    while true; do
        read -rp "Index: " i
        [[ "$i" == "0" ]] && break
        if [[ "$i" =~ ^[0-9]+$ ]] && (( i>=0 && i<len )); then
            SELECTED+=("$i")
            name=$(jq -r ".[$i].name" "$DATA_FILE")
            SELECTED_NAMES+=("$name")
            echo "Added: $name"
        else
            echo "Invalid index, try again."
        fi
    done
    echo "Selected packages: ${SELECTED_NAMES[*]}"
}

# ====== REJOIN LOGIC ======
is_roblox_running(){ pidof "$ROBLOX_PKG" >/dev/null 2>&1; }
get_cpu_ram(){
    local cpu=$(top -n 1 | awk '/%cpu/{print $2; exit}' 2>/dev/null || echo "0")
    local mem=$(free | awk '/Mem/{printf "%.1f", $3/$2*100}' 2>/dev/null || echo "0")
    echo "CPU: ${cpu}% | RAM: ${mem}%"
}

open_app(){ local url="$1"; am start -a android.intent.action.VIEW -d "$url" >/dev/null 2>&1 || true; }
kill_roblox(){ am force-stop "$ROBLOX_PKG" >/dev/null 2>&1 || true; }

start_rejoin(){
    (( ${#SELECTED[@]} == 0 )) && { echo "No packages selected. Use option 5."; return; }
    read -rp "Interval seconds between checks [default ${OPEN_INTERVAL_DEFAULT}]: " interval
    interval=${interval:-$OPEN_INTERVAL_DEFAULT}

    echo "Starting auto-rejoin loop... Ctrl+C to stop."
    trap 'echo -e "\nStopping all loops..."; exit 0' INT

    while true; do
        for idx in "${SELECTED[@]}"; do
            len=$(json_len)
            (( idx>=0 && idx<len )) || continue
            name=$(jq -r ".[$idx].name" "$DATA_FILE")
            placeId=$(jq -r ".[$idx].placeId" "$DATA_FILE")
            jobId=$(jq -r ".[$idx].jobId // \"\"" "$DATA_FILE")
            [[ -z "$placeId" ]] && continue

            cpu_ram=$(get_cpu_ram)
            if ! is_roblox_running; then
                echo "[$(date '+%H:%M:%S')] [$name] | Roblox not running â†’ starting..."
                placeId_clean=$(echo "$placeId" | sed 's/^0*//')
                url="roblox://experiences/start?placeId=$placeId_clean"
                [[ -n "$jobId" ]] && url="$url&gameInstanceId=$jobId"
                open_app "$url"
                sleep "$AFTER_LAUNCH_SLEEP"
            else
                echo "[$(date '+%H:%M:%S')] [$name] | Running | $cpu_ram"
            fi
        done
        sleep "$interval"
    done
}

login_cookie(){
    [[ ! -f "$COOKIE_FILE" ]] && touch "$COOKIE_FILE"
    read -rp "Enter Roblox cookie: " rcookie
    echo "$rcookie" > "$COOKIE_FILE"
    echo "Cookie saved."
    len=$(json_len)
    if (( len == 1 )); then
        SELECTED=(0)
        SELECTED_NAMES=($(jq -r ".[$SELECTED[0]].name" "$DATA_FILE"))
        echo "Single package found. Auto-selected: ${SELECTED_NAMES[*]}"
    else
        echo "Multiple packages detected. Use option 5 to select one or more."
    fi
    start_rejoin
}

# ====== MENU LOOP ======
main_menu(){
    clear
    print_banner
    echo "Selected packages: ${SELECTED_NAMES[*]:-<none>}"
    echo "1) Start auto-rejoin"
    echo "2) Add packages from installed apps"
    echo "3) List packages"
    echo "4) Remove package"
    echo "5) Select packages"
    echo "6) Login via cookie"
    echo "0) Exit"
    echo
    read -rp "Choice: " choice
    case "$choice" in
        1) start_rejoin ;;
        2) add_packages_from_installed ;;
        3) list_packages ;;
        4) remove_package ;;
        5) select_packages ;;
        6) login_cookie ;;
        0) echo "Bye"; exit 0 ;;
        *) echo "Invalid";;
    esac
}

while true; do
    main_menu
    echo
    read -rp "Press Enter to return to menu..."
done
