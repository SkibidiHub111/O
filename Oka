#!/usr/bin/env bash
set -euo pipefail

DATA_DIR="${HOME}/.rejoin_tool"
DATA_FILE="${DATA_DIR}/packages.json"
DOWNLOADS_DIR="${HOME}/storage/downloads"
COOKIE_FILE="${DOWNLOADS_DIR}/cookie.txt"
ROBLOX_PKG="com.roblox.client"
DEFAULT_PACKAGE_NAME="banana.Tool"
AFTER_LAUNCH_SLEEP=15
OPEN_INTERVAL_DEFAULT=5

mkdir -p "$DATA_DIR" "$DOWNLOADS_DIR"
[[ -f "$DATA_FILE" ]] || echo "[]" >"$DATA_FILE"

SELECTED=()
SELECTED_NAMES=()

print_banner(){
echo -e "\e[36m
 ____    _    _   _ _   _ _   _ 
| __ )  / \\  | \\ | | \\ | | \\ | |
|  _ \\ / _ \\ |  \\| |  \\| |  \\| |
| |_) / ___ \\| |\\  | |\\  | |\\  |
|____/_/   \\_\\_| \\_|_| \\_|_| \\_|
\e[0m"
echo -e "\e[33m            banana.Tool made by baor\e[0m"
}

has_cmd(){ command -v "$1" >/dev/null 2>&1; }
json_len(){ jq 'length' "$DATA_FILE" 2>/dev/null || echo 0; }

safe_list_all_apps(){
    if has_cmd pm; then
        pm list packages -3 2>/dev/null | sed 's/package://g' || true
    else
        echo "$ROBLOX_PKG"
    fi
}

# ------------------ ADD PACKAGE ------------------
add_packages_from_installed(){
    mapfile -t apps < <(safe_list_all_apps)
    (( ${#apps[@]} == 0 )) && { echo "No user apps found."; return; }
    echo "Installed apps:"
    for i in "${!apps[@]}"; do
        printf "[%d] %s\n" "$((i+1))" "${apps[i]}"
    done
    echo "Enter indices to add (comma-separated), 0 to cancel:"
    read -rp "> " sel
    [[ "$sel" == "0" ]] && return
    IFS=',' read -ra nums <<< "$sel"

    read -rp "Use same PlaceId/JobId for all? (y/N): " batch
    batch=${batch,,}

    current=$(cat "$DATA_FILE")
    for n in "${nums[@]}"; do
        (( n<=0 || n>${#apps[@]} )) && { echo "Invalid index: $n"; continue; }
        idx=$((n-1))
        pkg="${apps[$idx]}"

        read -rp "Label for $pkg (default: $pkg): " name
        name=${name:-$pkg}

        if [[ "$batch" == "y" ]]; then
            [[ -z "$placeIdAll" ]] && read -rp "PlaceId for all: " placeIdAll
            [[ -z "$jobIdAll" ]] && read -rp "Optional JobId for all: " jobIdAll
            placeId="$placeIdAll"
            jobId="$jobIdAll"
        else
            read -rp "PlaceId: " placeId
            read -rp "Optional JobId: " jobId
        fi

        read -rp "Package identifier (default: ${DEFAULT_PACKAGE_NAME}): " pkg_input
        pkg_input=${pkg_input:-$DEFAULT_PACKAGE_NAME}

        new=$(jq --arg n "$name" --arg p "$placeId" --arg j "$jobId" --arg pkg "$pkg_input" \
            '. + [{name:$n,placeId:$p,jobId:$j,package:$pkg}]' <<<"$current")
        echo "$new" > "$DATA_FILE"
        current="$new"
        echo "Added: $name | pkg:$pkg_input | place:$placeId | job:${jobId:-<none>}"
    done
}

list_packages(){
    len=$(json_len)
    ((len==0)) && { echo "<none>"; return; }
    for i in $(seq 0 $((len-1))); do
        n=$(jq -r ".[$i].name" "$DATA_FILE")
        p=$(jq -r ".[$i].placeId" "$DATA_FILE")
        j=$(jq -r ".[$i].jobId // \"<none>\"" "$DATA_FILE")
        pkg=$(jq -r ".[$i].package // \"<none>\"" "$DATA_FILE")
        printf "[%d] %s | place:%s | job:%s | pkg:%s\n" "$((i+1))" "$n" "$p" "$j" "$pkg"
    done
}

remove_package(){
    list_packages
    read -rp "Index to remove: " idx
    [[ -z "$idx" ]] && return
    (( idx<=0 )) && { echo "Invalid index."; return; }
    len=$(json_len)
    (( idx>len )) && { echo "Out of range."; return; }
    tmp=$(jq "del(.[$((idx-1))])" "$DATA_FILE")
    echo "$tmp" > "$DATA_FILE"
    echo "Removed index $idx"
}

select_packages(){
    len=$(json_len)
    ((len==0)) && { echo "No packages available. Add first."; return; }
    SELECTED=()
    SELECTED_NAMES=()
    echo "Available packages:"
    list_packages
    echo "Enter indices (1 or more). 0 when done."
    while true; do
        read -rp "Index: " i
        [[ "$i" == "0" ]] && break
        if [[ "$i" =~ ^[0-9]+$ ]] && (( i>0 && i<=len )); then
            idx=$((i-1))
            SELECTED+=("$idx")
            name=$(jq -r ".[$idx].name" "$DATA_FILE")
            SELECTED_NAMES+=("$name")
            echo "Added: $name"
        else
            echo "Invalid index, try again."
        fi
    done
    echo "Selected: ${SELECTED_NAMES[*]:-<none>}"
}

# ------------------ COOKIE LOGIN ------------------
login_cookie_only(){
    echo "Enter Roblox cookie:"
    read -rp "Cookie: " rcookie
    echo "$rcookie" > "$COOKIE_FILE"
    echo "Validating..."
    response=$(curl -s -H "Cookie: .ROBLOSECURITY=$rcookie" "https://users.roblox.com/v1/users/authenticated" || true)
    name=$(jq -r '.name // empty' <<<"$response")
    if [[ -n "$name" ]]; then
        echo "Cookie valid. Logged in as $name."
    else
        echo "Invalid cookie."
    fi
}

login_to_app_with_cookie(){
    if [[ ! -f "$COOKIE_FILE" ]]; then
        echo "Missing cookie file. Run menu 7 first."
        return 1
    fi
    cookie=$(<"$COOKIE_FILE")
    response=$(curl -s -H "Cookie: .ROBLOSECURITY=$cookie" "https://users.roblox.com/v1/users/authenticated" || true)
    name=$(jq -r '.name // empty' <<<"$response")
    if [[ -n "$name" ]]; then
        echo "Logged in as $name (cookie valid)."
    else
        echo "Invalid cookie. Please relogin."
        return 1
    fi
}

# ------------------ START REJOIN ------------------
start_rejoin_loop(){
    [[ ${#SELECTED[@]} -eq 0 ]] && { echo "Select packages first (menu 4)."; return; }

    login_to_app_with_cookie || return

    echo -e "\nStarting rejoin loop..."
    trap 'echo -e "\nStopping rejoin..."; exit 0' INT

    while true; do
        for idx in "${SELECTED[@]}"; do
            name=$(jq -r ".[$idx].name" "$DATA_FILE")
            placeId=$(jq -r ".[$idx].placeId" "$DATA_FILE")
            jobId=$(jq -r ".[$idx].jobId // \"\"" "$DATA_FILE")
            pkg=$(jq -r ".[$idx].package // \"$ROBLOX_PKG\"" "$DATA_FILE")

            url="robloxmobile://placeId=$placeId"
            [[ -n "$jobId" ]] && url="$url&launchData=$jobId"

            if pidof "$pkg" >/dev/null; then
                echo "[$(date '+%H:%M:%S')] [$name] Roblox running..."
            else
                echo "[$(date '+%H:%M:%S')] [$name] Roblox closed → opening app & joining..."
                am start -n "$pkg/com.roblox.client.startup.ActivityStart" >/dev/null 2>&1
                sleep 3
                am start -a android.intent.action.VIEW -d "$url" >/dev/null 2>&1
                sleep "$AFTER_LAUNCH_SLEEP"
            fi
        done
        sleep "$OPEN_INTERVAL_DEFAULT"
    done
}

start_rejoin_loop_no_cookie(){
    echo "Starting rejoin..."
    read -rp "Enter PlaceId: " placeId
    [[ -z "$placeId" ]] && { echo "PlaceId required."; return; }
    read -rp "Link Server Vip (press Enter if none): " jobId

    echo -e "\nInstalled Roblox apps:"
    mapfile -t apps < <(safe_list_all_apps)
    for i in "${!apps[@]}"; do
        printf "[%d] %s\n" "$((i+1))" "${apps[i]}"
    done
    read -rp "Select package index: " pkg_index
    ((pkg_index<=0 || pkg_index>${#apps[@]})) && { echo "Invalid index."; return; }
    package="${apps[$((pkg_index-1))]}"
    echo "Selected package: $package"

    trap 'echo -e "\nStopping rejoin..."; exit 0' INT
    while true; do
        if pidof "$package" >/dev/null; then
            echo "[$(date '+%H:%M:%S')] Roblox running..."
        else
            echo "[$(date '+%H:%M:%S')] Roblox closed → rejoining..."
            url="robloxmobile://placeId=$placeId"
            [[ -n "$jobId" ]] && url="$url&launchData=$jobId"
            am start -a android.intent.action.VIEW -d "$url" >/dev/null 2>&1
            sleep "$AFTER_LAUNCH_SLEEP"
        fi
        sleep "$OPEN_INTERVAL_DEFAULT"
    done
}

# ------------------ MENU ------------------
main_menu(){
    clear
    print_banner
    echo "Selected packages: ${SELECTED_NAMES[*]:-<none>}"
    echo "1) Add packages"
    echo "2) List packages"
    echo "3) Remove package"
    echo "4) Select packages"
    echo "5) Start auto-rejoin (with cookie login)"
    echo "6) Start auto-rejoin (no cookie)"
    echo "7) Login cookie"
    echo "0) Exit"
    read -rp "Choice: " choice
    case "$choice" in
        1) add_packages_from_installed ;;
        2) list_packages ;;
        3) remove_package ;;
        4) select_packages ;;
        5) start_rejoin_loop ;;
        6) start_rejoin_loop_no_cookie ;;
        7) login_cookie_only ;;
        0) echo "Bye"; exit 0 ;;
        *) echo "Invalid";;
    esac
}

# ------------------ DEPENDENCY CHECK ------------------
for dep in jq curl pm; do
    if ! has_cmd "$dep"; then
        echo "Installing missing dependency: $dep"
        pkg install -y "$dep"
    fi
done

while true; do
    main_menu
    echo
    read -rp "Press Enter to return to menu..."
done
